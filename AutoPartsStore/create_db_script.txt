create table client(
	id serial primary key,
	name varchar not null,
	tel varchar not null unique,
	email varchar,
);

create table product(
	id serial primary key,
	name varchar not null unique,
	description varchar,
	price integer
);

create table storage(
	id serial primary key,
	product_id integer,
	count integer not null,
	last_update_date timestamp not null,
	foreign key (product_id) references product (id)
);

create table orderr(
	id serial primary key,
	client_id integer,
	order_address varchar not null,
	total_price integer not null,
	order_date timestamp not null,
	order_status varchar not null,
	foreign key (client_id) references client (id)
);

create table order_info(
	order_id integer,
	product_id integer,
	count integer not null,
	price integer not null,
	payment_status varchar not null,
	delivery_status varchar not null,
	primary key(order_id, product_id),
	foreign key (product_id) references product (id),
	foreign key (order_id) REFERENCES orderr (id)
);

create or replace function add_pr_to_storage()
	returns trigger as
$$
begin
	insert into storage(product_id, count, last_update_date)
	values (new.id, 0, current_timestamp);
	
	return new;
end;
$$
language 'plpgsql';

create trigger ins_new_pr_to_storage
	after insert
	on product
	for each row
	execute procedure add_pr_to_storage()
	
	
	
create or replace function delete_pr_from_storage()
	returns trigger as
$$
begin
	delete from storage where product_id = old.id;
	return old;
end;
$$
language 'plpgsql';

create or replace trigger del_pr_from_storage
	before delete
	on product
	for each row
	execute procedure delete_pr_from_storage()


create or replace function upd_total_price_on_insert()
	returns trigger as
$$
begin
	update orderr set total_price = total_price + new.price where id = new.order_id;
	return new;
end;
$$
language 'plpgsql';

create or replace trigger upd_order_total_price_on_insert
	after insert
	on order_info
	for each row
	execute procedure upd_total_price_on_insert();


create or replace function upd_total_price_on_delete()
	returns trigger as
$$
begin
	update orderr set total_price = total_price - old.price where id = old.order_id;
	return old;
end;
$$
language 'plpgsql';

create or replace trigger upd_order_total_price_on_delete
	before delete
	on order_info
	for each row
	execute procedure upd_total_price_on_delete();